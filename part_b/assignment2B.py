# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgpZH98gvZsCqau6HQNt6xF-VIcLLye8
"""

# Importing the required libraries.
import os
import numpy as np
import matplotlib as plt
import tensorflow as tf
import pandas as pd
from tensorflow.keras import layers,models
from tensorflow.keras.layers import Dropout, Flatten, Dense, Activation, BatchNormalization, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# https://keras.io/api/applications/

from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_resnet_v2 import InceptionResNetV2
from keras.applications.resnet import ResNet50
from keras.applications.xception import Xception
# from keras.applications.vgg16 import VGG16
from keras.applications.mobilenet_v2 import MobileNetV2

# Verifying the tensorflow version is latest 2.8.0
print(tf.__version__)

# Downloading the inaturalist dataset.
dataset_url = "https://storage.googleapis.com/wandb_datasets/nature_12K.zip"
dataset_dir = tf.keras.utils.get_file("nature_12K",origin=dataset_url,cache_dir='.',extract=True)

# Setting the train dataset and test dataset directory.
trainset_dir = './datasets/inaturalist_12K/train/'
testset_dir = './datasets/inaturalist_12K/val/'
classlist = [name for name in os.listdir(trainset_dir) if os.path.isdir(os.path.join(trainset_dir, name))]
# classlist

# Installing the wandb for experimental tracking and reporting.
# !pip install wandb --upgrade     #For experiment tracking
# import wandb
# wandb.login()

# Generating the train dataset and val dataset.
def generate_batch_train_val(path, augmentation, batch_size, image_size):
    rescaledata = tf.keras.layers.Rescaling(1./127.5, offset=-1)
    #Splits the dataset into train and validation.
    #Keras' ImageDataGenerator is used to split data into train and test. 
    if augmentation:
        #Applies data augmentation if specified
        train_data_gen = ImageDataGenerator(
                            rescale = 1./255,
                            horizontal_flip = True,
                            rotation_range = 30,
                            shear_range = 0.2,
                            zoom_range = 0.2,
                            width_shift_range = 0.2,
                            height_shift_range = 0.2,
                            validation_split = 0.1,
                        )
    else:
        train_data_gen = ImageDataGenerator(rescale=1./255, validation_split=0.10)

    #Flow from directory expects that images belonging to each class is present in its own folder but inside the same parent folder : data directory.
    #It takes path to the data directory as input and generates batches of desired batch size.
    #Need to specify appropriate subset (training / validation) to generate batches for respective subset.
    train_data = train_data_gen.flow_from_directory(
            path,
            target_size=image_size,
            color_mode="rgb",
            batch_size=batch_size,
            class_mode="sparse",
            shuffle=True,
            seed = 0,
            subset="training"
        )
        
    val_data = train_data_gen.flow_from_directory(
        path,
        target_size=image_size,
        color_mode="rgb",
        batch_size=batch_size,
        class_mode="sparse",
        shuffle=True,
        seed=0,
        subset="validation"
    )

    #Gets the list of class labels.
    class_labels = list(train_data.class_indices.keys())


    return train_data, val_data, class_labels

# Generating the test dataset.
def generate_batch_test(path, batch_size, image_size):
    #Generates batches of test data.
    test_data_gen = ImageDataGenerator(
    rescale = 1./255
    )

    test_data = test_data_gen.flow_from_directory(
            path,
            target_size=image_size,
            color_mode="rgb",
            batch_size=batch_size,
            class_mode="sparse",
            shuffle=True,
            seed=0,
        )

    return test_data

# https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator

# Training, predicting and logging the experiments. 
def train(config = None ):

    # Commenting the wandb tracking.
    # wandb.init(config = config)
    # config = wandb.config
    
    # Reading and setting the configuation
    batch_size = config['batch_size']
    augmentation = config['augmentation']
    pretrain_model = config['pretrain_model']
    droprate = config['droprate']
    batch_norm = config['batch_normalization']
    epoch = config['epoch']
    fc_size = config["fc_size"]
    num_of_trainable_layers = config['num_of_trainable_layers']

    # wandb.run.name =pretrain_model+'_'+'_bs_'+str(batch_size)+'_'+'_i_'+str(epoch)+'_aug_'+str('_aug_' if augmentation else '')+'_fc_size_'+str(fc_size)+str('_bn_' if batch_norm else '')+'_dr_'+str(droprate)+"trainable_layers"+str(num_of_trainable_layers)

    # Choosing the pretrained model based on configuration input.
    if pretrain_model == 'InceptionV3':
        image_size = (299,299)
        base_model = tf.keras.applications.InceptionV3(include_top = False,weights='imagenet', input_shape=image_size+(3,))

    elif pretrain_model == 'InceptionResNetV2':
        image_size = (299,299)
        base_model = tf.keras.applications.InceptionResNetV2(include_top = False,weights='imagenet',input_shape=image_size+(3,))

    elif pretrain_model == 'ResNet50':
        image_size = (224,224)
        base_model = tf.keras.applications.ResNet50(include_top = False,weights='imagenet',input_shape=image_size+(3,))
    
    elif pretrain_model == 'Xception':
        image_size = (299,299)
        base_model = tf.keras.applications.Xception(include_top = False,weights='imagenet',input_shape=image_size+(3,))
    
    elif pretrain_model == 'MobileNetV2':
        image_size = (224,224)
        base_model = tf.keras.applications.MobileNetV2(include_top = False,weights='imagenet',input_shape=image_size+(3,))

    # Freezing the pretrained model's layer. 
    base_model.trainable = False

    # Adding the new fully connected layer on top of the feature extraction layers of pretrained model.
    model = tf.keras.Sequential([
        tf.keras.Input(shape=image_size+(3,)),
        base_model,
        Flatten(),
        Dense(fc_size,activation='relu'),
    ])

    if batch_norm:
        model.add(BatchNormalization())

    model.add(Dropout(droprate))
    model.add(Dense(fc_size, activation='relu'))
    model.add(Dropout(droprate))
    train_data,val_data,class_labels = generate_batch_train_val(trainset_dir, augmentation, batch_size,image_size)
    model.add(Dense(len(class_labels) ,activation='softmax'))   

    # Setting the optimization and loss function.
    model.compile(
        optimizer= 'adam',
        loss=tf.keras.losses.SparseCategoricalCrossentropy(),
        metrics=['accuracy']
    )

    # Dividing the epoch between pretraining and fine-tuning(if asked).
    if num_of_trainable_layers > 0:
        fine_tuning_epoch = int(epoch/2)
        pretrain_epoch = int(epoch/2)
    else:
        pretrain_epoch = epoch
    
    #Setting the wandb callback function.
    # wandb_callback = wandb.keras.WandbCallback(monitor="val_accuracy")
    
    # Training the model.
    hist=model.fit(train_data,epochs=pretrain_epoch,validation_data=val_data)#,callbacks=[wandb_callback]
    

    # Fine-tuning
    # Based on input, if number of trainable layers are >0, then setting that number of the freezed layers in pretrained model trainable.
    if num_of_trainable_layers > 0:
        num_of_trainable_layers=num_of_trainable_layers+(len(model.layers)-len(base_model.layers))
        for layer in reversed(model.layers):
            if(num_of_trainable_layers> 0):
                layer.trainable=True
                num_of_trainable_layers -= 1
        
        model.compile(
            optimizer= tf.keras.optimizers.Adam(learning_rate=1e-5),
            loss=tf.keras.losses.SparseCategoricalCrossentropy(),
            metrics=['accuracy'])
        
        # Fine tuning.
        hist=model.fit(train_data,epochs=fine_tuning_epoch,validation_data=val_data)#,callbacks=[wandb_callback])


#Reference : Tensorflow Documentation.



# Best parameters configuration run.
config = {
    'pretrain_model': 'Xception',
    'epoch':9,
    'batch_size': 16,
    'augmentation': True,
    'fc_size': 256,
    'droprate':0.4,
    'batch_normalization': True,
    'num_of_trainable_layers' : 1
    }
train(config)

# Sweep configuration
sweep_config = {
    'name': 'A2_B_bayes',
    'method': 'bayes',
    'early_terminate':{'type': 'hyperband', 'min_iter': 3},
    'metric':{'name':'val_Accuracy','goal':'maximize'},
    'parameters': {
        'pretrain_model' : {'values' :['InceptionV3','InceptionResNetV2','ResNet50','Xception','MobileNetV2']},
        'epoch' : {'values':[6,9]},
        'batch_size' : {'values':[16,32,128]},
        'augmentation':{'values':[True,False]},
        'fc_size': {'values': [128,256,512]},
        'droprate':{'values': [0.4,0.5]},
        'batch_normalization': {'values':[True,False]},
        'num_of_trainable_layers' : {'values': [0,1,2]},

    }
}

# Running for a particular sweep id.
# sweep_id = '8hfvwkv6' # wandb.sweep( sweep_config,project='CS6910_A2',entity='cs6910_a2')
# wandb.agent(sweep_id, function=train)#count = 10

